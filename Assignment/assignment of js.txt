// JavaScript Code to Implement the User Management App
document.addEventListener('DOMContentLoaded', () => {
  const userList = document.getElementById('user-list');
  const userForm = document.getElementById('user-form');
  const formTitle = document.getElementById('form-title');
  const submitButton = document.getElementById('submit-button');

  let editMode = false;
  let editUserId = null;

  // Fetch Users from Mock API
  async function fetchUsers() {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users');
      const users = await response.json();
      displayUsers(users);
    } catch (error) {
      alert('Failed to fetch users. Please try again later.');
      console.error(error);
    }
  }

  // Display Users in the UI
  function displayUsers(users) {
    userList.innerHTML = '';
    users.forEach(user => {
      const userItem = document.createElement('div');
      userItem.className = 'user-item';
      userItem.innerHTML = `
        <p><strong>ID:</strong> ${user.id}</p>
        <p><strong>Name:</strong> ${user.name}</p>
        <p><strong>Email:</strong> ${user.email}</p>
        <p><strong>Department:</strong> ${user.company?.name || 'N/A'}</p>
        <button onclick="editUser(${user.id}, '${user.name}', '${user.email}', '${user.company?.name || ''}')">Edit</button>
        <button onclick="deleteUser(${user.id})">Delete</button>
      `;
      userList.appendChild(userItem);
    });
  }

  // Add or Edit User
  async function handleFormSubmit(event) {
    event.preventDefault();
    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    const department = document.getElementById('department').value;

    if (!name || !email || !department) {
      alert('All fields are required!');
      return;
    }

    const userData = {
      name,
      email,
      company: { name: department }
    };

    try {
      if (editMode) {
        await fetch(`https://jsonplaceholder.typicode.com/users/${editUserId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(userData)
        });
        alert('User updated successfully!');
      } else {
        await fetch('https://jsonplaceholder.typicode.com/users', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(userData)
        });
        alert('User added successfully!');
      }
      resetForm();
      fetchUsers();
    } catch (error) {
      alert('Failed to save user. Please try again later.');
      console.error(error);
    }
  }

  // Edit User
  function editUser(id, name, email, department) {
    editMode = true;
    editUserId = id;
    formTitle.textContent = 'Edit User';
    submitButton.textContent = 'Update';
    document.getElementById('name').value = name;
    document.getElementById('email').value = email;
    document.getElementById('department').value = department;
  }

  // Delete User
  async function deleteUser(id) {
    try {
      await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {
        method: 'DELETE'
      });
      alert('User deleted successfully!');
      fetchUsers();
    } catch (error) {
      alert('Failed to delete user. Please try again later.');
      console.error(error);
    }
  }

  // Reset Form
  function resetForm() {
    editMode = false;
    editUserId = null;
    formTitle.textContent = 'Add User';
    submitButton.textContent = 'Add';
    userForm.reset();
  }

  // Event Listeners
  userForm.addEventListener('submit', handleFormSubmit);

  // Initialize App
  fetchUsers();
});
